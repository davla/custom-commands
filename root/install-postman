#!/usr/bin/env bash

# This script installs Postman in a given directory. It does so only if the
# directory doesn't already contain a Postman installation, or if the installed
# version is older than the latest available one. It also creates a .desktop
# file and a symbolic link on PATH pointing to the Postman executable inside
# the installation directory.

# The only dependency is the jq package, used to check what is the installed
# version of Postman.

# For information about the arguments, execute this file with the -h flag.

#####################################################
#
#                   Parameters
#
#####################################################

FORCE_INSTALL='false'
POSTMAN_EXEC_BASE='/usr/local/bin'
POSTMAN_EXEC_NAME='postman'
POSTMAN_INSTALL_HOME='/opt/postman'
POSTMAN_URL='https://dl.pstmn.io/download/latest/linux64'

#####################################################
#
#                   Variables
#
#####################################################

HELP_MESSAGE="Usage: install-postman [OPTION]...

Installs Postman in a given directory only if it doesn't contain a Postman
installation or if the installed version is older than the currently available
one. It also creates a desktop file and a symbolic link to the Postman
executable inside the installation directory.

Options:
    -b PATH     Use PATH as base installation directory for Postman.
                Default: '$POSTMAN_INSTALL_HOME'.

    -d PATH     Use PATH as base directory for postman executable symbolic
                link.
                Default: '$POSTMAN_EXEC_BASE'.

    -f          Force installation.

    -h          Print this help message.

    -x NAME     Use NAME as the filename for postman executable symbolic link.
                If NAME is an absolute path, then such path is used for the
                executable, ignoring any base directory set with -d.
                Default: '$POSTMAN_EXEC_NAME'."

#####################################################
#
#                   Aliases
#
#####################################################

shopt -s expand_aliases

# Echoes normally if from terminal emulator, otherwise uses syslog
tty -s && alias print='echo' || alias print='logger -p local0.info -t POSTMAN'

#####################################################
#
#                   Functions
#
#####################################################

# This function downloads Postman from the specified URL and extracts it in the
# specified directory, which is created if not already existing.
#
# Arguments:
#     - $1: Download URL.
#     - $2: Extraction direcotry.
function download-and-extract {
    local POSTMAN_URL="$1"
    local POSTMAN_INSTALL_HOME="$2"

    local ARCH_NAME='postman.tar.gz'

    wget "$POSTMAN_URL" -O "$ARCH_NAME"

    mkdir -p "$POSTMAN_INSTALL_HOME"
	tar -xf "$ARCH_NAME" -C "$POSTMAN_INSTALL_HOME" --strip-components=1

	rm -rf "$ARCH_NAME"
}

# This is just a convenience function to avoid remembering the arguments of
# download-and-extract, make-deskop and make-symlink
function install-postman {
    download-and-extract "$POSTMAN_URL" "$POSTMAN_INSTALL_HOME"
    make-desktop "$POSTAMN_EXEC_PATH" "$POSTMAN_INSTALL_HOME"
    make-symlink "$POSTMAN_INSTALL_HOME" "$POSTMAN_EXEC_PATH"
}

# This functions compares two version numbers. It exits with a zero status code
# if the first version is newer than the second one, otherwise with a non-zero
# code: this occurs when the first version is equal or older than the second
# one.
#
# Arguments:
#     - $1: First version number.
#     - $2: Second version number.
function is-newer {
    local FIRST="$1"
    local SECOND="$2"

    # Either the two versions are equal or sort -V will list the first version
    # last, so that the tail will be equal to it.
    [[ "$FIRST" != "$SECOND" && $(xargs -n 1 <<<"$FIRST $SECOND" \
        | sort -V | tail -n 1) == "$FIRST" ]]
}

# This function fetches from the Internet the version number of the latest
# available Postman version.
function latest-postman-version {
	curl -sI "$POSTMAN_URL" | grep -Po \
        '(?<=filename\=Postman-linux-x64-)[\d\.]+(?=\.tar\.gz)'
}

# This function creates a system-wide desktop file for Postman.
#
# Arguments:
#     - $1: Path to a Postman executable file.
#     - $2: Postman installation directory.
function make-desktop {
    local POSTAMN_EXEC_PATH="$1"
    local POSTMAN_INSTALL_HOME="$2"

    # Need to create a file, so echo is used
    # instead of print alias
    echo "[Desktop Entry]
Encoding=UTF-8
Version=1.0
Name=Postman
Comment=API test
Exec=$POSTMAN_EXEC_PATH
Icon=$POSTMAN_INSTALL_HOME/app/resources/app/assets/icon.png
Terminal=false
Type=Application
Categories=Network;Development;" > /usr/share/applications/postman.desktop
}

# This function creates a symbolic link at the passed path to the Postman
# execitable found in the specified directory.
#
# Arguments:
#   - $1: The directory in which the Postman executable is to be found.
#   - $2: The symbolic link target path.
function make-symlink {
    local POSTMAN_INSTALL_HOME="$1"
    local POSTMAN_EXEC_PATH="$2"

    dirname "$POSTMAN_EXEC_PATH" | xargs mkdir -p
    find "$POSTMAN_INSTALL_HOME" -executable -type f -name 'Postman' \
        2> /dev/null | head -n 1 | xargs -i ln -sf '{}' "$POSTMAN_EXEC_PATH"
}

#####################################################
#
#               Input processing
#
#####################################################

while getopts 'b:d:fhx:' OPTION; do
    case "$OPTION" in
        'b')
            POSTMAN_INSTALL_HOME=$(realpath "$OPTARG")
            ;;

        'd')
            POSTMAN_EXEC_BASE=$(realpath "$OPTARG")
            ;;

        'f')
            FORCE_INSTALL='true'
            ;;

        'h')
            print "$HELP_MESSAGE"
            exit 0
            ;;

        'x')
            POSTMAN_EXEC_NAME="$OPTARG"
            ;;

        *) # getopts already printed an error message
            print "$HELP_MESSAGE"
            exit 1
            ;;
    esac
done

# The executable name is an absolute path
if [[ "${POSTMAN_EXEC_NAME:0:1}" == '/' ]]; then
    POSTMAN_EXEC_PATH="$POSTMAN_EXEC_NAME"

# The executable name contains directories
elif [[ "$POSTMAN_EXEC_NAME" =~ / ]]; then
    print >&2 "Error: '$POSTMAN_EXEC_NAME' is neither a file name nor an" \
        'absolute path.'
    exit 1

# The executbale path is built via the dedicated variables
else
    POSTMAN_EXEC_PATH="$POSTMAN_EXEC_BASE/$POSTMAN_EXEC_NAME"
fi

#####################################################
#
#               Dependencies check
#
#####################################################

if ! which jq &> /dev/null; then
	print 'Error - no jq executable found'
	exit 1
fi

#####################################################
#
#           Version check and installation
#
#####################################################

# Forced install or postman not installed
if [[ "$FORCE_INSTALL" == 'true' || ! -d "$POSTMAN_INSTALL_HOME" ]]; then
	install-postman
	print 'Postman installed'
	exit 0
fi

POSTMAN_LATEST_VERSION=$(latest-postman-version)
POSTMAN_INSTALLED_VERSION=$(jq -r '.version' \
    "$POSTMAN_INSTALL_HOME/app/resources/app/package.json")

# Old version installed
if is-newer "$POSTMAN_LATEST_VERSION" "$POSTMAN_INSTALLED_VERSION"; then
	[[ -d "$POSTMAN_INSTALL_HOME" ]] && rm -rf "$POSTMAN_INSTALL_HOME"
	install-postman
	print 'Postman updated'

# Current version up-to-date
else
	print 'Postman not updated'
fi
