#!/usr/bin/env bash

# This script deals with manual installation/update/removal of applications
# that aren't packaged in any repository. It assumes the machinery for manual
# installation to be installed.
#
# The script installs applications if they are not installed, or if the
# installed version is older than the latest available one. In this case, the
# current installation is wiped, and the new version is installed from scratch.
# Errors are logged in the log directory under the machinery installation path.
#
# Specific applications can be installed by passing their name, that is the
# name of the  *.inst file in the functions.d directory under the machinery
# installation path; other files matching the specifications can be used as
# well, by passing their path. If no applications are provided, all the ones
# found in functions.d are installed.
#
# Arguments:
#   - -b <base>: The base directory where the manual install machinery is
#       installed in. It's read also from the environment variable
#       MANUAL_INST_BASE, and defaults to /usr/local/lib/manual-install.
#   - -f: Flag, forces the installation of applications, regardless of the
#       installed version.
#   - -r: Flag, removes the applications.
#   - $@: The applications to be installed, as names or absolute paths.
#       Optional, defaults to all the packages in functions.d. More info above.

#####################################################
#
#                   Aliases
#
#####################################################

shopt -s expand_aliases

# Echoes normally if from terminal emulator, otherwise uses syslog
tty -s \
    && alias print='echo' \
    || alias print='logger -p local0.info -t MANUAL_INSTALL'

#####################################################
#
#                   Functions
#
#####################################################

# This function executes a command suppressing its STDOUT and redirecting its
# STDERR to a file in the log directory in the machinery installation path.
# If the commands terminates successfully, the log file is removed, otherwise
# a message is printed. Returns the exit code of the command.
#
# Arguments:
#   - $1: The command to be executed.
#   - $2: The application name. Used in the log file name and in the error
#       message.
#   - $3: The action to print in the error message.
function with-log {
    local CMD="$1"
    local APPLICATION="$2"
    local ACTION="$3"

    ERROR_LOG="$MANUAL_INST_LOG_DIR/$APPLICATION-error.log"

    $CMD > /dev/null 2> "$ERROR_LOG"
    EXIT_CODE="$?"
    [[ "$EXIT_CODE" -ne 0 ]] \
        && print "$APPLICATION: errors occurred while $ACTION. See " \
            "$ERROR_LOG for details." \
        || rm "$ERROR_LOG"
    return "$EXIT_CODE"
}

# This function manually installs an application. It does so only if the
# application is not installed at all, or when the installed version is older
# than the available one. In the latter case, the application is removed and
# then the new version is installed from scratch. Errors during installation
# and removal are logged, while installation checks and version retrieval and
# comparison are not.
#
# Arguments:
#   - $1: The application to be installed.
function manual-install {
    local APPLICATION="$1"

    if ! is-installed &> /dev/null; then
        with-log install "$APPLICATION" 'installing' \
            && print "$APPLICATION version $(installed-version) installed"
    else
        INSTALLED_VERSION="$(installed-version)"
        LATEST_VERSION="$(latest-version)"

        if is-newer "$LATEST_VERSION" "$INSTALLED_VERSION" &> /dev/null; then

            # The || prevents the function from executing any further in case
            # of removal error. The exit code is the remove error code.
            with-log remove "$APPLICATION" 'removing' || return

            with-log install "$APPLICATION" 'installing' \
                && print "Updated package $APPLICATION to $LATEST_VERSION " \
                    "- was $INSTALLED_VERSION"
        else
            print "$APPLICATION is already the latest version " \
                "($INSTALLED_VERSION)"
        fi
    fi
}

#####################################################
#
#               Input processing
#
#####################################################

MANUAL_INST_DIR="${MANUAL_INST_BASE:-/usr/local/lib/manual-install}"

# The flags override the action to be taken for every application. The default
# action is to install or update to latest version.
alias action='manual-install'

while getopts 'b:fr' OPTION; do
    case "$OPTION" in
        'b')
            MANUAL_INST_DIR="$OPTARG"
            ;;

        'f')
            # Action forcing installation: removes the installed application,
            # if any, and then installs the latest version.
            function action {
                is-installed && \
                    { with-log remove "$1" 'removing' || return; }
                with-log install "$1" 'installing' \
                    && print "$1 version $(installed-version) installed"
            }

            # Aliasing takes precedence over functions.
            unalias action
            ;;

        'r')
            # Action removing the application
            function action {
                with-log remove "$1" 'removing'
            }

            # Aliasing takes precedence over functions.
            unalias action
            ;;

        *)  # getopts has already printed an error message
            exit 1
            ;;
    esac
done
shift $(( OPTIND - 1 ))

# Manual installation machinery directories
MANUAL_INST_FUNCTIONS_DIR="$MANUAL_INST_DIR/functions.d"
MANUAL_INST_LOG_DIR="$MANUAL_INST_DIR/log"

# Checking for manual installationmachinery to be installed at the specified
# location
if [[ ! -d "$MANUAL_INST_FUNCTIONS_DIR" ]] \
    || [[ ! -d "$MANUAL_INST_LOG_DIR" ]]; then
    echo >&2 "No manual installation machinery found in $MANUAL_INST_DIR!"
    exit 1
fi

APPLICATIONS=()

# Applications are supplied. Mapping the names to their *inst file in the
# functions.d directory in the machinery installation path, unless they are
# already valid file paths.
if [[ $# -gt 0 ]]; then
    for APPLICATION in "$@"; do
        [[ ! -f "$APPLICATION" ]] \
            && APPLICATION="$MANUAL_INST_FUNCTIONS_DIR/$APPLICATION.inst"
        APPLICATIONS+=("$APPLICATION")
    done

# No applications are passed, just using all files in the functions.d
# directory in the machinery installation path.
else
    APPLICATIONS=("$MANUAL_INST_FUNCTIONS_DIR/"*inst)
fi

#####################################################
#
#           Installing applications
#
#####################################################

for APPLICATION in "${APPLICATIONS[@]}"; do
    APPLICATION_NAME="$(basename "$APPLICATION" .inst)"

    # Loading the function definitions for the application.
    source "$APPLICATION"

    # Taking an action on the application, based on command line flags.
    action "$APPLICATION_NAME"
done
