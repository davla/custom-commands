#!/bin/sh

# This script adapts the UI scaling to the screen resolution:
# it is upscaled for HIDPI resolutions and scaled back to
# normal for standard ones.
#
# Arguments:
#   -f: flag, forces UI scaling

#####################################################
#
#                   Parameters
#
#####################################################

# The value of dots-per-mm below which the screen is considered not HIDPI
DPMM_THRESHOLD='5'

#####################################################
#
#                   Variables
#
#####################################################

# Xrandr lines for active displays and their maximum resolution
ACTIVE_DISPLAYS=$(xrandr | grep -A 1 --group-separator='' -P '\bconnected.*\d')

# Whether the current dot-per-mm is lower than the threshold.
# Line-by-line comments:
# Extracting current resolution, display size and maximum resolution for
#       active displays
# Getting the digits only
# Grouping digits by display, that is current reslution, size, and maximum
#       resolution
# Printing the x-axis dots-per-mm value for every display
# Concatenating the dpmm values
# Removign trailing comma
# Printing whether the minimum of the dpmm is below the threshold
#       The call to min() is wrapped in a list because without it
#       min() could be called with one argument only, making it fail
IS_DPMM_LOW=$(echo "$ACTIVE_DISPLAYS" | grep -oP '(\d+mm x \d+mm|\d+x\d+)' \
    | grep -oP '\d+' \
    | xargs -n 6 \
    | awk '{print $5/$3","}' \
    | xargs \
    | sed 's/,$//' \
    | xargs -i python3 -c "print(min([{}]) < $DPMM_THRESHOLD)")
IS_DPMM_LOW="$(echo "$IS_DPMM_LOW" | awk '{print tolower($0)}')"

# The current status, that is upscaled or not
[ "$(xfconf-query -c 'xsettings' -p '/Xft/DPI')" != '-1' ] \
    && IS_UPSCALED='true' \
    || IS_UPSCALED='false'

# Whether the UI should be scaled
SET_SCALING='false'

#####################################################
#
#               Input processing
#
#####################################################

# Whether to force scaling, and in what direction. Possible values:
#   - down -- Forces downscaling.
#   - false -- Scaling not forced.
#   - up -- Forces upscaling.
FORCE_SCALING='false'

# If more than one CLI arguments are supplied, don't know which direction
# the UI should be scaled.
if [ "$#" -gt 1 ]; then
    echo >&2 'You can only force scaling once'
    exit 1
fi

while getopts 'fud' OPTION; do
    case "$OPTION" in
        'd')
            FORCE_SCALING='down'
            ;;

        'f')
            # If the scaling is generically forced, setting the direction
            # based on the dots per millimiter density.
            [ "$IS_DPMM_LOW" = 'true' ] \
                && FORCE_SCALING='down' \
                || FORCE_SCALING='up'
            ;;

        'u')
            FORCE_SCALING='up'
            ;;

        *)  # getopts has already printed an error message
            exit 1
            ;;
    esac
done

#####################################################
#
#           Resolution-dependent values
#
#####################################################

# Whether the UI could be possibly downscaled
if [ "$FORCE_SCALING" = 'down' -o \
    "$FORCE_SCALING" = 'false' -a "$IS_DPMM_LOW" = 'true' ]; then

    # Scaling-independent values

    # Quotes are necessary for awk and xrandr when setting the resolution
    RESOLUTION='"1920x1080"'

    # Whether the UI must be downscaled
    if [ "$FORCE_SCALING" = 'down' -o \
        "$FORCE_SCALING" = 'false' -a "$IS_UPSCALED" = 'true' ]; then
        SET_SCALING='true'

        # Downscaling
        CURSOR_SIZE=24
        DPI='-1'
        EYES_THEME='Default-tiny'
        GDK_SCALE=1
        GDK_DPI_SCALE=1
        ICON_SIZES="\'\'"
        PANEL_SIZE=24
        SYSTRAY_ICON_SIZE=22
        THUNAR_ICON_SIZE='THUNAR_ICON_SIZE_SMALL'
        THUNAR_SEPARATOR=174
        THUNAR_WINDOW_HEIGHT=520
        THUNAR_WINDOW_WIDTH=700
        THUNAR_ZOOM='THUNAR_ZOOM_LEVEL_NORMAL'
    fi

# Whether the UI could be possibly upscaled
elif [ "$FORCE_SCALING" = 'up' -o \
    "$FORCE_SCALING" = 'false' -a "$IS_DPMM_LOW" = 'false' ]; then

    # Scaling-independent values
    RESOLUTION='$2'

    # Whether the UI must be upscaled
    if [ "$FORCE_SCALING" = 'up' -o \
        "$FORCE_SCALING" = 'false' -a "$IS_UPSCALED" = 'false' ]; then
        SET_SCALING='true'

        # Upscaling
        CURSOR_SIZE=48
        DPI=180
        EYES_THEME='Default'
        GDK_SCALE=2
        GDK_DPI_SCALE=0.5
        ICON_SIZES="gtk-menu=40,40:gtk-button=45,45:gtk-dialog=48,48:\
gtk-small-toolbar=78,78:gtk-large-toolbar=45,45"
        PANEL_SIZE=48
        SYSTRAY_ICON_SIZE=43
        THUNAR_ICON_SIZE='THUNAR_ICON_SIZE_LARGE'
        THUNAR_SEPARATOR=324
        THUNAR_WINDOW_HEIGHT=965
        THUNAR_WINDOW_WIDTH=1270
        THUNAR_ZOOM='THUNAR_ZOOM_LEVEL_LARGER'
    fi
fi

#####################################################
#
#               Setting scaling values
#
#####################################################

if [ "$SET_SCALING" = 'true' ]; then

    #####################################################
    #
    #               Setting Xfce values
    #
    #####################################################

    # Fetching the base name of the xfconf system tray panel plugin
    SYSTRAY_PROP_BASE="$(xfconf-query -c xfce4-panel -p '/plugins' -l -v \
        | grep systray | cut -d ' ' -f 1)"

    # A list of tuples "<channel> <property> <type> <value>" to be used with
    # xfconf
    XFCONF_SETTINGS="thunar /last-icon-view-zoom-level string $THUNAR_ZOOM \
thunar /last-separator-position int $THUNAR_SEPARATOR \
thunar /last-window-height int $THUNAR_WINDOW_HEIGHT \
thunar /last-window-width int $THUNAR_WINDOW_WIDTH \
thunar /shortcuts-icon-size string $THUNAR_ICON_SIZE \
thunar /tree-icon-size string $THUNAR_ICON_SIZE \
xfce4-panel /panels/panel-1/size int $PANEL_SIZE \
xfce4-panel $SYSTRAY_PROP_BASE/size-max int $SYSTRAY_ICON_SIZE \
xsettings /Gtk/CursorThemeSize int $CURSOR_SIZE \
xsettings /Gtk/IconSizes string $ICON_SIZES \
xsettings /Xfce/LastCustomDPI int $DPI \
xsettings /Xft/DPI int $DPI"

    # Changing xfconf prperties
    echo "$XFCONF_SETTINGS" \
        | sed -E 's/(\S+) (\S+) (\S+) (\S+)/-c \1 -p \2 -t \3 -s \4\n/g' \
        | xargs -n 8 xfconf-query -n

    # Changing the theme of the eyes plugin
    sed -i -E "s/theme=.+/theme=$EYES_THEME/g" \
        "$HOME/.config/xfce4/panel/eyes-4.rc"
fi

#####################################################
#
#               Setting Qt values
#
#####################################################

export QT_AUTO_SCREEN_SCALE_FACTOR=1

#####################################################
#
#               Setting GDK 3 values
#
#####################################################

# export GDK_SCALE
# export GDK_DPI_SCALE

#####################################################
#
#               Applying changes
#
#####################################################

# Killing panel for the changes to take effect
wmctrl -l | grep xfce4-panel | awk '{print $1}' | xargs xkill -id

# Changing the resolution of active displays. If all the active displays have
# comparable pixel density, the resolution is set to the maximum for each
# screen. Otherwise, setting it to 1080p.
#
# Line-by-line:
# Extracting display names and maximum resolution for active displays
# Grouping them by two, that is every display name with its maximum resolution
# Producing the last part of the xrandr command
# Executing xrandr to change the resolution. The arguments need to be grouped
#       by three since xargs considers them separately otherwise
echo "$ACTIVE_DISPLAYS" | grep -oP '^\s*(\S+)' \
    | xargs -n 2 \
    | awk '{print $1,"--mode",'"$RESOLUTION"'}' \
    | xargs -n 3 xrandr --output

# Setting the resolution in Xfce settings to keep the resolution consistent
# across reboots.
#
# The variable $ACTIVE_DISPLAYS can not be used here, since we want to include
# connected, but inactive, displays
for SCREEN in $(xrandr | grep -P '\bconnected\b' | cut -f 1 -d ' '); do

    SCREN="$(echo "$SCREEN" | tr -d '-')"

    # If the screen is active, the resolution is taken from xrandr.
    if [ "$(xfconf-query -c 'displays' -p "/Default/$SCREN/Active")" \
            = 'true' ]; then

        # Active screen have the current resolution next to their name in
        # xrandr output.
        RESOLUTION="$(xrandr | grep -P "$SCREEN" | cut -d ' ' -f 3 \
            | cut -d '+' -f 1)"
        echo $RESOLUTION

    # For inactive screens the 1080p value is used for the resolution.
    else
        RESOLUTION='1920x1080'
    fi

    xfconf-query -n -c 'displays' -p "/Default/$SCREN/Resolution" \
            -s "$RESOLUTION" -t 'string'
done
