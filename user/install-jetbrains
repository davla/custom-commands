#!/usr/bin/env bash

# This script downloads and extracts a jetbrains IDE and proceeds with the
# launcher script. Currently, only installing the latest version is supported,
# and only the following IDEs can be downloaded (it's just a matter of
# data-entry to add more):
#     - clion
#     - intellij
#     - goland
#     - pycharm
#     - rubymine
#     - webstorm

# For information about the arguments, execute this file with the -h flag.

#####################################################
#
#                   Parameters
#
#####################################################

JETBRAINS_BASE_DIR='/opt/jetbrains'
IDE_BASE_DIR=''

#####################################################
#
#                   Variable
#
#####################################################

ALLOWED_FLAVORS=''
JETBRAINS_DOWNLOAD_URL='https://data.services.jetbrains.com/products/download'
PLATFORM='linux'
PLATFORM_SUFFIX=''

HELP_MESSAGE="Usage install-jetbrains [-h] IDE_NAME [IDE_FLAVOR]

Downloads the latest version of a jetbrains IDE, extracts it in a
specific directory (see the options below for further information),
and then launchs its installation script.

Where IDE_NAME is one of
    - clion
    - intellij
    - goland
    - pycharm
    - rubymine
    - webstorm

IDE_FLAVOR is optional, and is ignored for any value of IDE_NAME
other than 'intellij' and 'pycharm'. In such cases, it defaults
to 'community', but its possible values are:
    - 'community' or 'ultimate' if IDE_NAME is 'intellij'
    - 'community' or 'professional' if IDE_NAME is 'pycharm'

Options:
    -b PATH     Use PATH as base installation directory for the JetBrains IDE.
                If PATH is not absolute, is resolved relatively to the current
                directory. PATH is created if not existing. The IDE will be
                installed in a new directory named after it inside PATH.
                Default: '$JETBRAINS_BASE_DIR'.

    -B PATH     Use PATH as installation directory for the JetBrains IDE. If
                PATH is not absolute, is resolved relatively to the current
                directory. PATH is created if not existing. The difference with
                -b is that no nested directory is created for the IDE.
                Default: none, the default behavior is as specified in -b.

    -h          Prints this help message.
"

#####################################################
#
#                   Functions
#
#####################################################

# This function retruns the flavor component for the IDE code to submitted as a
# URL parameter.
#
# Arguments:
#   -$1: The flavor whose code should be returned.
#   -$2: A space-separed list of allowed flavors.
function make-flavor-code {
    local FLAVOR="$1"
    local ALLOWED_FLAVORS="$2"

    read -a ALLOWED_FLAVORS <<<"$ALLOWED_FLAVORS"

    # Mocking array-search -_-" - Printing on separate lines and greping with
    # line match.
    if printf '\n%s' "${ALLOWED_FLAVORS[@]}" \
            | grep -x "$FLAVOR" > /dev/null; then
        awk '{print toupper(substr($0, 1, 1))}' <<<"$FLAVOR"
    else
        echo >&2 "Error: flavor '$FLAVOR' not recognized"
        exit 1
    fi
}

#####################################################
#
#               Input processing
#
#####################################################

while getopts 'b:B:h' OPTION; do
    case "$OPTION" in
        'B')
            IDE_BASE_DIR=$(readlink -f "$OPTARG")
            ;;

        'b')
            JETBRAINS_BASE_DIR=$(readlink -f "$OPTARG")
            ;;

        'h')
            echo -n "$HELP_MESSAGE"
            exit 0
            ;;

        *)  # getopts has already printed an error message
            echo -n "$HELP_MESSAGE"
            exit 1
            ;;
        esac
done
shift $(( OPTIND - 1 ))

# Dashes in positional parameters are not allowed
if [[ $* =~ [[:space:]]+-.[[:space:]]+ ]]; then
    echo 'Error while parsing input: named option should all come before' \
        'positional arguments'
    echo -n "$HELP_MESSAGE"
    exit 1
fi

IDE_NAME="${1,,}"

#####################################################
#
#               IDE-specific settings
#
#####################################################

case "$IDE_NAME" in
	'clion')
		IDE_CODE='CL'
		EXECPATH=bin/clion.sh
		;;

	'intellij')
        ALLOWED_FLAVORS='community ultimate'
        IDE_CODE='II'
        PLATFORM_SUFFIX='WithoutJDK'
		EXECPATH=bin/idea.sh
		;;

	'goland')
		IDE_CODE='GO'
		EXECPATH=bin/phpstorm.sh
		;;

	'phpstorm')
		IDE_CODE='PS'
		EXECPATH=bin/phpstorm.sh
		;;

	'pycharm')
        ALLOWED_FLAVORS='community professional'
        IDE_CODE='PC'
		EXECPATH=bin/pycharm.sh
		;;

	'rubymine')
		IDE_CODE='RM'
		EXECPATH=bin/rubymine.sh
		;;

	'webstorm')
		IDE_CODE='WS'
		EXECPATH=bin/webstorm.sh
		;;

	*)
		echo "IDE '$IDE_NAME' not recognized"
		exit 1
		;;
esac

# Used by intellij only to add the no-jdk option
URL_PLATFORM="${PLATFORM}${PLATFORM_SUFFIX}"

# The IDE has flavors
if [[ -n "$ALLOWED_FLAVORS" ]]; then
    FLAVOR="${2:-community}"

    # make-flavor-code prints an error message
    FLAVOR_CODE=$(make-flavor-code "$FLAVOR" "$ALLOWED_FLAVORS") || exit 1

    URL_CODE="${IDE_CODE}${FLAVOR_CODE}"
    FULL_IDE_NAME="$IDE_NAME-$FLAVOR"
else
    URL_CODE="$IDE_CODE"
    FULL_IDE_NAME="$IDE_NAME"
fi

#####################################################
#
#               Download and install
#
#####################################################

ARCH_NAME="$FULL_IDE_NAME.tar.gz"
[[ -z "$IDE_BASE_DIR" ]] && IDE_BASE_DIR="$JETBRAINS_BASE_DIR/$FULL_IDE_NAME"

echo "Downoading $FULL_IDE_NAME..."
curl -GL "$JETBRAINS_DOWNLOAD_URL" \
    -d "platform=$URL_PLATFORM" \
    -d "code=$URL_CODE" \
    > "$ARCH_NAME"

# The downloaded file is not an archive
if ! file -b "$ARCH_NAME" | grep 'compressed' &> /dev/null; then

    # The || fallback covers the cases in which jq is not installed or the
    # downloaded file is not JSON
    jq '.' "$ARCH_NAME" >&2 2> /dev/null \
        || echo "Download of $FULL_IDE_NAME failed!" >&2

    rm "$ARCH_NAME"
    exit 1
fi

# Removing any previous installation
sudo rm -rf "$IDE_BASE_DIR" 2> /dev/null
sudo mkdir -p "$IDE_BASE_DIR"

# Chagning ownership so that patch updates are executable as unprivileged users
sudo chown "$USER:$USER" "$IDE_BASE_DIR"

echo "Extracting $ARCH_NAME..."
tar -xf "$ARCH_NAME" -C "$IDE_BASE_DIR" --strip-components=1

rm "$ARCH_NAME"

echo 'Launching installation script...'
"$IDE_BASE_DIR/$EXECPATH"
